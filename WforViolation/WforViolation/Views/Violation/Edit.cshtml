@model WforViolation.Models.Violation

@{
    ViewBag.Title = "Edit";
}

<h2>Edit</h2>
@using (Html.BeginForm("Edit", "Violation", FormMethod.Post, new { @class = "form-horizontal", role = "form", enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    @Html.ValidationSummary(true)
    <div class="form-group">
        @Html.LabelFor(model => model.Title, new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.TextBoxFor(model => model.Title, new { @class = "form-control", @value = Model.Title })
            @Html.ValidationMessageFor(model => model.Title)
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.Description, new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.TextAreaFor(model => model.Description, new { cols = 50, @rows = 15, @value = Model.Description })
            @Html.ValidationMessageFor(model => model.Description)
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.Severity, new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EnumDropDownListFor(model => model.Severity, new { @class = "form-control" })

            @Html.ValidationMessageFor(model => model.Severity)
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.Status, new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EnumDropDownListFor(model => model.Status, new { @class = "form-control" })

            @Html.ValidationMessageFor(model => model.Status)
        </div>
    </div>
    if (Model.HasDynamic)
    {
        <div class="form-group">
            @Html.LabelFor(model => model.DynamicName, Model.DynamicName, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.DynamicValue, new { @class = "form-control" })
            </div>
        </div>
    }
    <div class="form-group">
        @Html.LabelFor(model => model.ExternalMediaStorage, "External Media", new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.TextBoxFor(model => model.ExternalMediaStorage, new { @class = "form-control", @value = Model.Title })
        </div>
    </div>
    <div class="form-group">
        <div class="col-md-6 col-md-offset-2">
            <img class="img-responsive" id="currentViolationImage" src="@Model.ViolationPictures.FirstOrDefault().MediumPath" alt="Current Photo">
        </div>
    </div>

    <div class="form-group">
        <div class="control-label col-md-2">
        </div>
        <div class="col-md-10 ">
            <input type="file" name="file" id="file" class="form-control" />
        </div>
        @*@Html.ValidationMessageFor(model => model.VImage)*@
    </div>
    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Update" class="btn btn-default" />
        </div>
    </div>
    @Html.HiddenFor(model => model.Address, new { @value = Model.Address });
    @Html.HiddenFor(model => model.CreationDateTime, new { @value = Model.CreationDateTime });
    @Html.HiddenFor(model => model.Id, new { @value = Model.Id });
    @Html.HiddenFor(model => model.LastEditorId, new { @value = Model.LastEditorId });

    @Html.HiddenFor(model => model.Latitude, new { @value = Model.Latitude });
    @Html.HiddenFor(model => model.Longtitude, new { @value = Model.Longtitude });
    @Html.HiddenFor(model => model.MainType, new { @value = Model.MainType });

    @Html.HiddenFor(model => model.Status, new { @value = Model.Status });
    @Html.HiddenFor(model => model.SubType, new { @value = Model.SubType });
    @Html.HiddenFor(model => model.ViewCount, new { @value = Model.ViewCount });
    @Html.HiddenFor(model => model.CreatorUser, new { @value = Model.CreatorUser });
    @Html.HiddenFor(model => model.DynamicName, new { @value = Model.DynamicName });
    @Html.HiddenFor(model => model.HasDynamic, new { @value = Model.HasDynamic });
    @Html.HiddenFor(model => model.MainViolationName, new { @value = Model.MainViolationName });
    @Html.HiddenFor(model => model.SubViolationName, new { @value = Model.SubViolationName });
    @Html.HiddenFor(model => model.ViolationPictures, new { @value = Model.ViolationPictures });
    @Html.HiddenFor(model => model.Comments, new { @value = Model.Comments });
}
<script>

    $("#file").on('change', function (e) {
        var files = e.target.files;
        var myID = 3; //uncomment this to make sure the ajax URL works
        if (files.length > 0) {
            if (window.FormData !== undefined) {
                var data = new FormData();
                for (var x = 0; x < files.length; x++) {
                    data.append("file" + x, files[x]);
                }

                $.ajax({
                    type: "POST",

                    url: '/File/UploadFile?id=' + $('#Id').val(),
                    contentType: false,
                    processData: false,
                    data: data,

                    success: function (result) {
                        $('#currentViolationImage').attr("src", result )
                    },
                    error: function (xhr, status, p3, p4) {
                        var err = "Error " + " " + status + " " + p3 + " " + p4;
                        if (xhr.responseText && xhr.responseText[0] == "{")
                            err = JSON.parse(xhr.responseText).Message;
                        console.log(err);
                    }
                });
            }
            else {
                alert("This browser doesn't support HTML5 file uploads!");
            }
        }
    });
            
</script>